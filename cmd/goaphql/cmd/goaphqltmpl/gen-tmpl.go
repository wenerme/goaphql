// Code generated by go-bindata.
// sources:
// ../../../../gqlg/tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Java#GraphLang.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Java#lombok.config.tmpl
// ../../../../gqlg/tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/core.tmpl
// DO NOT EDIT!

package goaphqltmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xca\xb1\x0a\x42\x31\x0c\x46\xe1\x3d\x4f\xf1\x73\x67\xed\x0b\x38\x09\x8a\xe0\x20\x0e\xe2\x1e\xaf\xf1\x52\x6c\xd3\xa2\xad\x20\x21\xef\x2e\x2a\x2e\x2e\x67\xf9\x8e\x59\x93\x5c\x13\x37\xc1\xb0\xe5\x07\xef\x79\xbc\xf2\x24\x03\x82\x3b\xd1\xbf\x1e\x9e\x55\x96\xaa\xa5\x7d\xbd\xf6\x53\x8a\x23\x44\x7b\x86\xd9\x46\xf4\xf7\xec\x38\x0b\xc2\xbb\xee\x30\x32\xbb\xb1\x4e\x82\xb0\xd6\x9e\x8f\x9c\xba\xac\xe4\x12\x35\xb6\x58\xf4\x0e\x77\x02\x00\xb3\xf0\x21\xf7\x19\x99\xcd\x21\x7a\x76\x5f\x90\xd3\x2b\x00\x00\xff\xff\x0a\xf6\x12\x75\xa3\x00\x00\x00")

func tmplGraphqlJavaEnumGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaEnumGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl", size: 163, mode: os.FileMode(420), modTime: time.Unix(1521624831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xc1\x8a\xc2\x40\x0c\x86\xef\x79\x8a\xd0\x07\x98\x17\x58\x16\x76\xa1\xec\xa2\x07\xf1\x20\xde\x63\x9b\x96\xc1\x69\x3a\xb4\x33\x05\x09\x79\x77\x19\xad\x88\xbd\xfc\x84\x7c\x7f\xbe\xa8\x26\x1e\x62\xa0\xc4\x58\xed\x69\xa1\x23\x35\x57\xea\xb9\x42\x67\x06\xb0\xa5\xa7\x5b\xe4\x5f\x91\x31\x3d\xf9\x4f\x4d\x89\x20\xe6\x4b\xf0\x0d\x36\x81\xe6\x19\x55\xff\x59\x5e\xd5\x03\x0d\x8c\xae\xa4\x19\x2a\xa8\x4e\x24\x3d\xa3\xdb\x49\xcc\xe9\xcf\x73\x68\x6b\xee\xbc\xf8\xe4\x47\x99\xcd\x00\x11\x31\x4e\x7e\x29\xff\x3e\x44\xe8\x4a\x16\x89\xae\x3a\x55\xdf\xa1\xab\xb9\xa3\x1c\xd2\x99\x42\x2e\xf4\xfb\x7d\xf5\x58\x6d\x0b\xaa\x2c\xad\xd9\x17\xac\x03\x18\xdc\x03\x00\x00\xff\xff\x6c\xf9\xab\x2c\x00\x01\x00\x00")

func tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1521624831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x75\x62\xb8\x0e\xed\x03\x50\x31\x20\x84\x50\x3b\x00\x03\x7d\x00\x93\x73\xda\xc0\xc5\x89\x72\xbe\x16\x14\xf9\xdd\x51\x7a\xa8\x6a\x75\x1e\x22\xcb\xff\xf7\x7f\x43\x12\xda\x6f\xdc\x13\x94\xf2\x14\xd9\xf9\xfd\x6a\x8b\x47\x7c\x9f\x8e\xaa\x6b\x63\x4a\x11\x0a\xa9\x47\x21\x68\x6a\xb6\x09\x29\x66\x69\x60\xa5\x5a\xc3\x25\xdc\x7d\xe1\x11\x3f\x7e\x13\xbd\x62\x20\xb8\x7f\x80\x17\xe2\xed\xf5\x69\x75\x7e\x97\x13\x7f\x2b\xab\xcc\x23\x73\xfc\xf7\xa5\xf1\xb3\xf7\x16\x3c\x0b\x65\x87\x96\x60\x33\x94\x72\xe3\x57\x85\x62\x0c\x00\x40\x47\x0e\xc7\x5e\x60\x0e\xe0\xbc\xd4\x2e\xca\xb9\x54\xc7\xbb\x56\x0e\x7e\x00\xcf\x83\x20\x5b\x8a\x6e\xee\xb8\xc2\xeb\x64\x92\x31\x33\xb4\x73\xae\x9a\xd6\x17\x56\x2f\x9b\x1c\x72\x3c\x01\xd3\x09\x76\x3c\x8c\xa9\x7e\x19\x75\x6f\x89\x32\x8a\x8f\xfc\xfc\x63\x29\xd5\xa5\x6d\x76\xec\x43\xea\x29\x10\x0b\x75\xcd\x62\x72\xa9\x51\xf3\x17\x00\x00\xff\xff\x75\xc7\xc6\xf9\x99\x01\x00\x00")

func tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl", size: 409, mode: os.FileMode(420), modTime: time.Unix(1521624865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaGraphlangJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\xdb\x8e\xda\x30\x10\x86\xef\xfd\x14\xa3\x5c\x91\xa8\xca\x3e\x00\x68\xa5\xaa\x6a\x2b\xaa\x55\x68\x77\x93\xde\x0f\xc9\x60\x2c\x7c\x92\x71\x42\xab\x28\xef\x5e\x99\x90\x13\x05\x5f\x20\x94\xef\x9b\x3f\x33\x13\xb7\xad\x27\x65\x25\x7a\x82\xe8\x07\x36\xf8\x13\xcb\x13\x72\x8a\x20\xed\x3a\x26\x94\x35\xce\x43\x69\x54\xca\x8d\xe1\x92\xd2\xd2\x28\x65\x74\xea\xe8\x20\xa9\xf4\x69\xfe\xd7\x52\x6e\x4e\xa4\xd7\x8c\xbd\x24\x09\x83\x04\xbe\x3b\xb4\xc7\x5f\x6f\xf0\x5e\x6b\x2f\x14\x31\x48\x5e\x98\xad\xf7\x52\x94\x20\xb4\x27\x77\xc0\x92\x7a\xe9\x0d\x35\x87\x96\x01\xc0\x8c\xbc\xd3\xd9\xc8\x86\xdc\x0d\x84\x53\xd1\x01\x6b\xe9\x61\xb3\xcd\x3e\xc1\xae\xc8\x5f\xa1\x31\xa2\x02\xd7\x9b\xab\xdf\x28\x6b\x1a\xca\x26\xe7\x86\x5d\x3c\x4b\x0a\x67\x78\x9e\xd2\x9f\x92\xac\x17\x46\xaf\x34\x5d\xa0\xd0\xe7\xda\x86\x69\xa9\xda\x59\x72\x18\xc0\xd7\xd1\x88\x0a\x2d\x94\x95\xa4\x48\x7b\xaa\xa2\x38\x5e\x8f\x99\x1d\xeb\x7f\xef\xe6\x78\xd2\x55\xcb\xc6\xc2\x6d\x06\x9c\xfc\x67\xc7\xeb\x90\xba\x8a\xd7\x13\xda\x15\x79\x60\xd7\x8c\x05\x58\x0c\x1e\xac\x26\x28\x4f\x8d\x2f\x26\x34\x1d\x26\xf8\xf0\xc8\x69\xd3\x2f\xef\xbe\x64\x6f\x8c\x24\xd4\x20\xce\xb7\x7e\xab\xc5\x3b\x1f\x86\x70\xf2\xdf\x08\x7d\xed\x1e\xf4\x37\x2d\x36\x3f\x3a\x73\xc1\xbd\x24\xf0\xc3\xbf\xb9\xfd\xe1\x9d\xd0\xfc\x9a\x25\x48\x56\x19\xaa\x65\xda\xc4\xc3\x3d\xfb\x0f\x8f\x97\x6f\xb3\xcd\x5e\xe7\xbb\x0c\xe0\x89\x39\x34\x7f\x5d\xed\xe0\xf5\x1f\xb0\x63\xff\x02\x00\x00\xff\xff\x83\x87\x2e\xef\x0c\x03\x00\x00")

func tmplGraphqlJavaJavaGraphlangJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaGraphlangJavaTmpl,
		"tmpl/graphql-java/Java#GraphLang.java.tmpl",
	)
}

func tmplGraphqlJavaJavaGraphlangJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaGraphlangJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Java#GraphLang.java.tmpl", size: 780, mode: os.FileMode(420), modTime: time.Unix(1521687335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaLombokConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8c\x41\x0e\xc2\x30\x0c\x04\xef\x7d\x45\x5e\x90\x1f\xf4\x50\x71\x80\x3b\x2f\x58\xe2\x45\xad\x30\x36\xc4\xce\xff\x51\x24\x7a\x1b\x69\x46\xa3\xfe\x7e\xf8\xab\xa2\x35\x46\x78\x8f\xda\x76\x1c\x56\xd6\x92\x7d\x70\xf9\x5b\x7e\x07\x34\x36\x93\x1b\x62\xbf\xb8\xb0\x36\xa8\xde\xc7\x87\xbd\xac\x65\xf2\x59\x42\xe4\x4a\x63\x47\x52\x36\x33\x4f\xe4\xe1\x73\xf7\x84\x06\x97\x5f\x00\x00\x00\xff\xff\x4b\x85\x5a\xe5\x6e\x00\x00\x00")

func tmplGraphqlJavaJavaLombokConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaLombokConfigTmpl,
		"tmpl/graphql-java/Java#lombok.config.tmpl",
	)
}

func tmplGraphqlJavaJavaLombokConfigTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaLombokConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Java#lombok.config.tmpl", size: 110, mode: os.FileMode(420), modTime: time.Unix(1521621407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x6f\xdb\x38\x13\xbe\xfb\x57\xcc\x2b\xbc\x07\x69\xe1\xf2\xb4\x27\xe7\x03\xed\xa6\x4d\x91\x05\x36\x09\xea\xb4\x7b\xa6\xa9\x91\xcc\x9a\x22\x55\x92\xb2\x37\x20\xf4\xdf\x17\x94\xf5\x45\x59\x4e\x7c\xd9\x39\x18\xa2\x39\x7c\x66\xf8\xf0\x99\x21\x9d\xb3\x58\x94\x82\x5a\x84\xe8\x4f\xba\xa7\xcf\x94\xed\x68\x8e\x11\x90\xba\x5e\xf0\xa2\x54\xda\x02\x53\x05\xc9\x95\xca\x05\x12\xa6\x8a\x42\x49\xa2\x31\x13\xc8\x2c\x79\x79\x2d\xf1\x45\xed\x50\x5e\x75\xbe\xb9\xa6\xe5\xf6\x97\x20\x86\x6d\xb1\xa0\x84\xa7\x82\xfc\x76\x6e\x72\x98\x38\x8d\xb0\xa1\x06\xc9\xb3\x46\xa6\x64\xca\x2d\x57\xd2\x5c\x2d\x16\x65\xb5\x11\x9c\x01\x97\x16\x75\x46\x19\x82\x73\x77\x4a\x66\x3c\x27\xeb\x06\xf1\x91\x16\x58\xd7\xc7\xef\xb5\xad\x36\xe0\x16\x0b\x00\x80\x8f\x42\x15\x1b\xb5\x23\xf8\x8f\x45\x2d\x89\x11\xd9\xef\x3f\xc9\xda\xff\x36\xd3\x2d\x2c\x13\xd4\x18\xf8\x9b\x6b\x2e\xf3\x7b\xca\xac\xd2\xaf\x0d\x08\x2f\x4a\x81\x05\x4a\x3b\x99\xec\xd1\x9f\xf6\xa8\x35\x4f\x71\x0c\xf6\x99\x5a\x7a\x8f\x96\x6d\x51\x43\x8e\xf6\x33\x66\xb4\x12\x76\xf4\x6f\x7c\xcf\x51\xa4\x47\xc0\x2f\x72\xcf\xb5\x92\x3e\x06\xe0\xf0\x9d\x80\x6b\x20\xbd\xad\xad\x77\x04\x49\x0b\x84\x9b\xb1\x13\xc9\xd1\x3e\x53\x8d\xd2\xfa\xc3\x88\x13\x3f\xf6\x3c\xc4\xc9\x55\xbf\xd8\x1c\xb8\x65\x5b\x88\xfd\xea\x0e\xd4\x39\x4d\x65\x8e\x40\xbe\x36\xd9\x71\x79\x64\x19\x3e\xd4\x75\x3b\xcf\x33\xc0\x5f\x10\x7b\x58\x0f\xf8\x94\x01\x49\x20\x7a\xda\xfc\x44\xd6\xc4\x1a\x56\x45\xfd\x2a\x6f\x8c\x1a\x84\xc8\x39\x72\x3c\x8e\x68\xd5\xcf\x78\xd3\x68\x2b\x2d\xc1\x6e\xb9\x59\xad\x32\xcf\x45\xef\x79\xd5\x06\xfe\x00\x28\xd3\x3e\x8d\xf1\xc8\x5b\x7a\xa4\x32\x44\x15\x2a\x27\x07\xaa\x65\x1c\x3d\x2a\xc8\x5a\xde\x33\xa5\xc1\xd5\xd1\xb2\x61\x6d\x44\xc7\x80\xd5\x26\x23\x2b\x21\x8e\xd3\xf5\x62\xf1\x1f\xb2\xe3\x37\xf3\xff\x14\x33\x58\xdd\x00\x09\x38\x6b\x55\x73\x5c\x0e\x21\x2d\x71\xaf\x9a\xb7\xa5\x12\x10\xe2\xdc\x57\x94\xbe\xa0\x7d\x2e\xd0\x22\x81\x46\xa3\xc4\x1e\xf5\xa9\x84\xd6\xaa\xd2\x2c\x10\x8d\xb7\x1f\x54\x54\xf8\xad\x5b\xb4\x0f\x46\x37\x23\xda\xa6\x42\x9b\x80\x37\x52\x1f\x08\x19\x8b\xf4\x44\x8e\x13\x5f\x13\x92\x97\xf9\xd9\x53\xfa\x2e\x93\x5e\x67\xd3\x7d\xb4\xac\xc4\x1d\x3b\xab\x55\xfb\xe5\xdc\x8b\xfa\x5e\x96\xa8\xef\x68\x81\xa2\x63\x71\x09\x9b\x8a\x8b\x34\xe0\x26\x9e\x0d\xe4\x4d\xe2\x21\xa4\xf1\xa1\x28\xc5\x75\xa3\x1f\xf2\x49\xe7\x95\xe7\x68\xb4\xdd\xba\x0e\x4f\xce\xcb\xa5\x8d\x4b\xe6\xd3\xe9\x40\x9c\x43\x61\xb0\xae\x7f\x28\x9e\x3a\xd7\xd4\xcc\x72\xa2\x02\xff\x5b\xd7\xb7\x71\xe2\xea\xe5\xd9\x84\x47\x67\x37\xeb\x93\x4c\x34\xd2\xd9\x46\x23\xdd\xcd\x95\xf0\xd8\x66\x8b\xb7\xb3\xb6\x1a\x1b\xf5\xdf\x53\x21\x36\x94\xed\xc6\x52\x9a\x04\x0e\xd1\x83\xbb\x82\xb0\x2d\xb2\xdd\xda\x52\x8b\x71\x70\xda\x84\x9b\xf6\x33\x8d\x93\x25\x44\xcd\xc9\x80\x54\xb6\x13\x41\x1a\x4d\xa2\xb4\x49\x85\x28\x5e\xd3\x48\x6d\xa5\x83\x8a\x99\xeb\x58\xc3\xa8\x77\xfb\xb8\x96\x48\x77\xaf\x2f\x5b\xad\x0e\x66\xda\x01\xae\x1f\x1e\x97\xf0\xf4\xfd\xe5\x36\x14\xcd\xf0\xf7\x7b\xda\x3b\xd5\x5a\xbf\xb4\xd3\x77\x78\xf6\x17\x74\x97\xde\x7f\x7c\x23\x79\x7b\x78\x04\xda\xca\xaf\xef\x07\x81\x03\xcf\xa0\x2f\x2b\xcf\x5a\x27\xd6\xe1\xae\xfa\x46\x0f\xc7\x01\xfc\xef\x06\xbc\x76\x49\x73\x0f\x4f\x23\x8d\xc2\xc4\x0f\x8f\x09\x5c\x08\x4a\x24\x1e\x1e\xa4\xb1\x54\x9e\x36\xb7\x3f\x90\xca\x3b\x55\xbe\x92\x4c\xab\xe2\x2f\x5a\x4e\xbb\x56\x07\x6b\xe2\x24\x21\x56\x79\xf7\xb8\x4b\x23\x21\x4c\x95\xaf\x53\xc4\x7a\x31\x91\xce\x31\xc7\x13\xb1\x13\x33\xa0\x0f\x90\xb3\x6e\xdd\xfd\x72\x51\x4b\x9d\xbe\x00\xe6\x21\x9b\xa5\x17\x63\xce\x21\x5d\x4d\xf7\xd9\x94\x48\xb7\xdd\x71\x41\x0c\xf2\xd6\xca\x22\xb3\x98\x06\x77\x5c\x5f\xe5\x17\x5e\x71\xe3\xa8\xfd\x95\x7f\xb2\xc9\xe8\x8e\xca\xa6\xa6\x9b\x18\xe0\x6a\xe2\x5f\x01\x27\x6e\x17\x3d\xa2\xde\x5d\xf6\x16\x69\xa1\x3a\xac\x2f\xf8\xe6\x3e\xf8\x64\x0c\x6a\xef\xfd\x45\x6b\xa5\xc3\x16\x32\x62\x8c\xef\xfd\xb3\xfc\xdd\x8e\xd0\x5d\x5f\x41\xb0\xce\xed\xbe\x92\xcc\x47\x1a\xdc\xb3\xf6\x9f\xe5\xf9\xb6\x71\xda\x32\xce\x76\x80\x0e\x8d\x50\xc6\xb0\xb4\x7d\xb1\xcf\x77\xd1\x37\x25\x32\x3c\xeb\xcf\x27\xef\x5f\xf0\x32\x35\x70\xa7\xa4\xa9\x0a\xd4\xd7\xf3\x79\xdf\x8e\x9f\x43\x75\xfb\xb2\xab\x17\xff\x06\x00\x00\xff\xff\x72\x2f\x0c\xbe\xed\x0c\x00\x00")

func tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl,
		"tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl",
	)
}

func tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl", size: 3309, mode: os.FileMode(420), modTime: time.Unix(1521691481, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x51\x4d\x0f\xd3\x30\x0c\xbd\xf7\x57\x58\x13\x87\x31\xb1\xee\xce\x18\x62\xda\x00\xc1\x01\x21\x34\x76\x0f\xad\x5b\x45\xa4\x49\x94\xa6\x15\xc8\xf2\x7f\x47\xf9\x02\xd6\x7d\x1c\xa2\xd5\xcf\x7e\x7e\x7e\xcf\x8a\xe6\xa7\xe8\x11\x88\x4e\x46\x77\xb2\xaf\x3f\x8b\x59\x7c\x4d\x45\xe6\x7d\x55\x11\x79\x1c\xac\x12\x1e\x61\x15\xb0\x4f\x83\x35\xce\xaf\xa0\x66\xbe\x07\x2f\xbf\x2d\x1e\xb5\x36\x19\xb7\xd3\x0f\x25\x1b\x90\xda\xa3\xeb\x44\x13\xb6\x7c\x44\x5d\x1a\xbf\x88\x01\xa1\x0e\x2f\x33\xe0\x2f\x8f\xba\x1d\xe1\x1b\x8e\x46\xcd\xe8\xee\xd6\x16\x8e\xf7\xa9\x31\x2e\x00\xaa\x88\x9c\xd0\x3d\x42\xfd\x41\xa2\x6a\xcf\xd8\x49\x2d\xbd\x34\x7a\x0c\xf2\x2a\x00\x80\x16\x3b\x31\x29\x0f\xb3\x91\x2d\xb8\x44\x4f\x74\x31\xdf\xad\x45\x77\x12\x03\xaa\x22\x62\x7d\x15\x6a\xc2\xa2\xe0\x0d\x91\xec\xa0\x3e\xba\x7e\x1a\x50\xfb\x1b\xea\xc7\xf3\xa5\x95\x08\xd5\x88\xcc\x57\x23\x5b\x22\xd4\x2d\xf3\xab\x9b\xcb\xa1\x0e\x2f\xf3\xdb\xa2\xc7\xbd\xa4\xa8\x35\xfc\x72\x69\xfd\x17\xda\x47\x88\x2b\xa2\x2d\x44\xb2\x7c\x58\xf8\xde\x6d\xa0\x6c\x1d\x61\xb3\x83\x6d\x4a\xe5\x89\x27\x11\x0e\x63\x2f\xba\x80\xc0\xeb\x03\xd4\xb9\xf6\xf4\xd4\xb4\xeb\xdd\x59\x78\x11\xff\x35\x4a\x8c\x23\x2c\x0c\x48\x7c\x0b\x1b\x80\xb2\xcc\xac\xe6\x31\x7d\x39\xdb\x3a\x39\x87\xb4\x1f\x1a\x05\x44\x99\x3c\x29\x3d\xa7\x4c\x63\x5e\xcc\x70\xf8\x37\x15\x4b\xcb\x86\x1c\xc2\x3e\xeb\x49\x26\x2e\x4d\xfd\xcf\x5e\xae\xfe\x04\x00\x00\xff\xff\xef\xb9\x3d\xd0\x17\x03\x00\x00")

func tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl", size: 791, mode: os.FileMode(420), modTime: time.Unix(1521653758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x8f\x9b\x30\x10\x85\xef\xfc\x0a\x8b\x13\xa9\x76\xbd\xbd\xaf\x2a\xb5\x6a\xab\x88\x55\xd5\xed\xa1\x7f\x60\x80\x81\x38\x81\x31\xb1\x0d\x4d\x34\xf2\x7f\xaf\x0c\x84\x40\x94\x48\x7b\xc2\xbc\x79\x3c\xbf\xf9\x04\x73\x81\xa5\x22\x14\xf1\x1b\xf4\x90\x36\xad\x36\x2e\x16\xcf\xde\x47\x6a\x38\x8b\x3d\xf4\x70\x92\x3d\xd4\xaa\x00\xa7\x34\xc9\x5c\x93\x75\x06\x14\x39\x2b\x3f\xbd\x2e\x6d\xb2\x73\xaa\x0e\xf3\xbc\x33\x06\xc9\xdd\x1d\x97\x1d\xe5\x43\xce\xbd\xe1\x55\xab\x75\x93\xe9\xc3\x8d\xe9\x03\x3d\x98\xbf\x6b\x2a\x55\x25\xc3\x3a\x7f\x20\x3f\x40\x85\xde\xcb\xad\x81\x76\xf7\x0b\xa8\x0a\xd6\x88\xd9\x00\x55\x28\x26\xeb\xb8\xf5\x64\xb6\xd7\xd5\x99\xa5\xf7\xaf\x11\xf3\xb3\x40\x2a\xbc\x8f\x98\xc7\x67\xb4\xa6\xb6\x45\x42\x03\x0e\x8b\x6f\x44\x7a\xa2\xf7\x75\xec\x0b\x41\x19\xfb\xce\xae\xa4\x87\xba\xc3\x2f\xf1\x2c\x88\xec\x2c\x2a\xe5\x76\x5d\x26\x73\xdd\xbc\xfc\x0b\x7a\x83\x2f\x95\x86\x76\x77\xac\xe3\xcd\xa2\xc1\xcd\xcd\x7f\xcf\x2d\x2e\x2e\x65\x76\xd8\xb4\x35\xb8\x07\xc5\xe4\xe0\x99\xb3\x6e\xc2\x26\x00\x63\x54\x3b\xbe\x3c\xe0\x39\x30\x5c\xdf\x75\xf9\x75\xe4\x63\x4e\x29\x39\x34\x25\xe4\xf8\xf3\xe4\x90\x0a\x7b\x29\xad\x4a\x81\x47\x91\x84\x65\x7e\x43\x83\xef\xa5\x90\x1b\x11\xbf\x67\x7b\xcc\x5d\x10\x7f\x84\x0c\x15\x20\x2e\xbe\xa8\x9c\x48\x6a\x24\x21\xe7\x54\xbb\x11\x9f\x87\xf9\x53\x6a\x99\xdf\xb4\x22\x91\x6c\x91\x2e\x9c\x42\xb4\x5d\xdb\xe3\xa7\xd4\xc6\x2b\x26\xf7\x4e\xff\x03\x00\x00\xff\xff\xb5\xda\xd0\x05\x23\x03\x00\x00")

func tmplGraphqlJavaCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaCoreTmpl,
		"tmpl/graphql-java/core.tmpl",
	)
}

func tmplGraphqlJavaCoreTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/core.tmpl", size: 803, mode: os.FileMode(420), modTime: time.Unix(1521653816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl":             tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl":      tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl":      tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/Java#GraphLang.java.tmpl":                             tmplGraphqlJavaJavaGraphlangJavaTmpl,
	"tmpl/graphql-java/Java#lombok.config.tmpl":                              tmplGraphqlJavaJavaLombokConfigTmpl,
	"tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl":       tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl,
	"tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl": tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/core.tmpl":                                            tmplGraphqlJavaCoreTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": {nil, map[string]*bintree{
		"graphql-java": {nil, map[string]*bintree{
			"Enum#{{GenJavaTypeName .Name}}.java.tmpl":             {tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"InputObject#{{GenJavaTypeName .Name}}.java.tmpl":      {tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"Interface#Is{{GenJavaTypeName .Name}}.java.tmpl":      {tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"Java#GraphLang.java.tmpl":                             {tmplGraphqlJavaJavaGraphlangJavaTmpl, map[string]*bintree{}},
			"Java#lombok.config.tmpl":                              {tmplGraphqlJavaJavaLombokConfigTmpl, map[string]*bintree{}},
			"Java#{{Config.SchemaName}}SchemaStub.java.tmpl":       {tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl, map[string]*bintree{}},
			"Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl": {tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"core.tmpl": {tmplGraphqlJavaCoreTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
