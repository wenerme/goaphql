// Code generated by go-bindata.
// sources:
// ../../../../gqlg/tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Java#lombok.config.tmpl
// ../../../../gqlg/tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl
// ../../../../gqlg/tmpl/graphql-java/core.tmpl
// ../../../../gqlg/tmpl/graphql-java/java.graphqls
// DO NOT EDIT!

package goaphqltmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xca\xb1\x0a\x42\x31\x0c\x46\xe1\x3d\x4f\xf1\x73\x67\xed\x0b\x38\x09\x8a\xe0\x20\x0e\xe2\x1e\xaf\xf1\x52\x6c\xd3\xa2\xad\x20\x21\xef\x2e\x2a\x2e\x2e\x67\xf9\x8e\x59\x93\x5c\x13\x37\xc1\xb0\xe5\x07\xef\x79\xbc\xf2\x24\x03\x82\x3b\xd1\xbf\x1e\x9e\x55\x96\xaa\xa5\x7d\xbd\xf6\x53\x8a\x23\x44\x7b\x86\xd9\x46\xf4\xf7\xec\x38\x0b\xc2\xbb\xee\x30\x32\xbb\xb1\x4e\x82\xb0\xd6\x9e\x8f\x9c\xba\xac\xe4\x12\x35\xb6\x58\xf4\x0e\x77\x02\x00\xb3\xf0\x21\xf7\x19\x99\xcd\x21\x7a\x76\x5f\x90\xd3\x2b\x00\x00\xff\xff\x0a\xf6\x12\x75\xa3\x00\x00\x00")

func tmplGraphqlJavaEnumGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaEnumGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl", size: 163, mode: os.FileMode(420), modTime: time.Unix(1521624831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xc1\x8a\xc2\x40\x0c\x86\xef\x79\x8a\xd0\x07\x98\x17\x58\x16\x76\xa1\xec\xa2\x07\xf1\x20\xde\x63\x9b\x96\xc1\x69\x3a\xb4\x33\x05\x09\x79\x77\x19\xad\x88\xbd\xfc\x84\x7c\x7f\xbe\xa8\x26\x1e\x62\xa0\xc4\x58\xed\x69\xa1\x23\x35\x57\xea\xb9\x42\x67\x06\xb0\xa5\xa7\x5b\xe4\x5f\x91\x31\x3d\xf9\x4f\x4d\x89\x20\xe6\x4b\xf0\x0d\x36\x81\xe6\x19\x55\xff\x59\x5e\xd5\x03\x0d\x8c\xae\xa4\x19\x2a\xa8\x4e\x24\x3d\xa3\xdb\x49\xcc\xe9\xcf\x73\x68\x6b\xee\xbc\xf8\xe4\x47\x99\xcd\x00\x11\x31\x4e\x7e\x29\xff\x3e\x44\xe8\x4a\x16\x89\xae\x3a\x55\xdf\xa1\xab\xb9\xa3\x1c\xd2\x99\x42\x2e\xf4\xfb\x7d\xf5\x58\x6d\x0b\xaa\x2c\xad\xd9\x17\xac\x03\x18\xdc\x03\x00\x00\xff\xff\x6c\xf9\xab\x2c\x00\x01\x00\x00")

func tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl", size: 256, mode: os.FileMode(420), modTime: time.Unix(1521624831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x75\x62\xb8\x0e\xed\x03\x50\x31\x20\x84\x50\x3b\x00\x03\x7d\x00\x93\x73\xda\xc0\xc5\x89\x72\xbe\x16\x14\xf9\xdd\x51\x7a\xa8\x6a\x75\x1e\x22\xcb\xff\xf7\x7f\x43\x12\xda\x6f\xdc\x13\x94\xf2\x14\xd9\xf9\xfd\x6a\x8b\x47\x7c\x9f\x8e\xaa\x6b\x63\x4a\x11\x0a\xa9\x47\x21\x68\x6a\xb6\x09\x29\x66\x69\x60\xa5\x5a\xc3\x25\xdc\x7d\xe1\x11\x3f\x7e\x13\xbd\x62\x20\xb8\x7f\x80\x17\xe2\xed\xf5\x69\x75\x7e\x97\x13\x7f\x2b\xab\xcc\x23\x73\xfc\xf7\xa5\xf1\xb3\xf7\x16\x3c\x0b\x65\x87\x96\x60\x33\x94\x72\xe3\x57\x85\x62\x0c\x00\x40\x47\x0e\xc7\x5e\x60\x0e\xe0\xbc\xd4\x2e\xca\xb9\x54\xc7\xbb\x56\x0e\x7e\x00\xcf\x83\x20\x5b\x8a\x6e\xee\xb8\xc2\xeb\x64\x92\x31\x33\xb4\x73\xae\x9a\xd6\x17\x56\x2f\x9b\x1c\x72\x3c\x01\xd3\x09\x76\x3c\x8c\xa9\x7e\x19\x75\x6f\x89\x32\x8a\x8f\xfc\xfc\x63\x29\xd5\xa5\x6d\x76\xec\x43\xea\x29\x10\x0b\x75\xcd\x62\x72\xa9\x51\xf3\x17\x00\x00\xff\xff\x75\xc7\xc6\xf9\x99\x01\x00\x00")

func tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl", size: 409, mode: os.FileMode(420), modTime: time.Unix(1521624865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaLombokConfigTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8c\x41\x0e\xc2\x30\x0c\x04\xef\x7d\x45\x5e\x90\x1f\xf4\x50\x71\x80\x3b\x2f\x58\xe2\x45\xad\x30\x36\xc4\xce\xff\x51\x24\x7a\x1b\x69\x46\xa3\xfe\x7e\xf8\xab\xa2\x35\x46\x78\x8f\xda\x76\x1c\x56\xd6\x92\x7d\x70\xf9\x5b\x7e\x07\x34\x36\x93\x1b\x62\xbf\xb8\xb0\x36\xa8\xde\xc7\x87\xbd\xac\x65\xf2\x59\x42\xe4\x4a\x63\x47\x52\x36\x33\x4f\xe4\xe1\x73\xf7\x84\x06\x97\x5f\x00\x00\x00\xff\xff\x4b\x85\x5a\xe5\x6e\x00\x00\x00")

func tmplGraphqlJavaJavaLombokConfigTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaLombokConfigTmpl,
		"tmpl/graphql-java/Java#lombok.config.tmpl",
	)
}

func tmplGraphqlJavaJavaLombokConfigTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaLombokConfigTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Java#lombok.config.tmpl", size: 110, mode: os.FileMode(420), modTime: time.Unix(1521621407, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x06\xc2\x1e\xe4\x85\xc3\xd3\x9e\xec\xcd\x62\x83\xa4\x0e\xd2\x43\x12\xd4\x69\x7a\xa6\xa8\x91\xcc\x98\x22\x15\x92\x72\x1a\x10\xfc\xf7\x82\xb2\x64\x8b\xb2\xd3\xf6\xd6\x39\x08\xa4\x67\xe6\xcd\xe8\xcd\x1b\xd9\x39\x8b\x75\x23\xa8\x45\x48\x3f\xd3\x1d\x7d\xa4\x6c\x4b\x2b\x4c\x81\x78\x9f\xf0\xba\x51\xda\x02\x53\x35\xa9\x94\xaa\x04\x12\xa6\xea\x5a\x49\xa2\xb1\x14\xc8\x2c\x79\x7a\x6f\xf0\x49\x6d\x51\x2e\x87\xd8\x4a\xd3\x66\xf3\x2a\x88\x61\x1b\xac\x29\xe1\x85\x20\x7f\x7f\xe4\x3c\x3a\x4e\x2b\xe4\xd4\x20\x79\xd4\xc8\x94\x2c\xb8\xe5\x4a\x9a\x65\x92\x34\x6d\x2e\x38\x03\x2e\x2d\xea\x92\x32\x04\xe7\xae\x95\x2c\x79\x45\xd6\x1d\xe2\x3d\xad\xd1\xfb\xfd\x79\x6d\xdb\x1c\x5c\x92\x00\x00\xfc\x2f\x54\x9d\xab\x2d\xc1\xef\x16\xb5\x24\x46\x94\xff\xbc\x90\x75\x78\x76\xee\x1e\x96\x09\x6a\x0c\x7c\xe3\x9a\xcb\x6a\x45\x99\x55\xfa\xbd\x03\x09\x59\xb2\x30\x70\x95\x1b\xab\x29\xb3\x51\xc4\xa1\xc4\xc3\x0e\xb5\xe6\x05\x8e\x11\x6f\xa8\xa5\x2b\xb4\x6c\x83\x1a\x2a\xb4\x37\x58\xd2\x56\xd8\xd1\xaf\xd9\x8a\xa3\x28\xf6\x80\x9f\xe4\x8e\x6b\x25\x6b\x94\x16\xf0\x78\x9e\x81\xeb\x20\x83\xad\x6d\x08\x04\x49\x6b\x84\xcb\x71\x10\xa9\xd0\x3e\x52\x8d\xd2\x86\x89\x64\xb3\x70\x0f\x64\x64\xb3\xe5\x21\xd9\xbc\x71\xcb\x36\x90\x85\xec\x01\xd4\x39\x4d\x65\x85\x40\x6e\xbb\xee\xb8\xdc\x53\x0d\x17\xde\xf7\x7e\x5e\x02\xbe\x42\x16\x60\x03\xe0\x43\x09\x64\x06\xe9\x43\xfe\x82\xac\xab\x75\xcc\x4a\xe3\x2c\xa9\x2c\x64\x77\x66\xbd\xe5\x4d\x83\x45\xc8\x1a\xdc\xc1\x18\x35\x08\xa9\x73\x64\x3f\xb2\x74\x71\xf0\x04\xd3\x68\x5b\x2d\xc1\x6e\xb8\x59\x2c\xca\x40\xd5\x21\x72\xd9\x57\xb8\x00\x94\xc5\xa1\xde\xc7\xb7\x60\xc5\x9e\xf7\xb8\x86\x50\x15\x79\xa3\x5a\x66\xe9\xbd\x82\xb2\x1f\x52\xa9\x34\x38\x9f\xce\x3b\x8a\x47\xdc\x1d\xb1\xfa\xd6\x64\x2b\xc4\xde\xed\x93\xe4\xcf\x51\x19\xde\xf5\xaf\x02\x4b\x58\x5c\x02\x89\x08\xee\x15\xb8\x47\x87\x98\xc3\xec\xa0\xc0\x9f\xcb\x2e\xe2\xcb\xb9\x5b\x94\xe1\x0b\x11\x5a\x85\x1e\x09\x34\x1a\x25\x76\xa8\x4f\xe5\xb8\x56\xad\x66\x91\x00\x83\x3d\x53\xd1\xe2\x97\x21\x69\x17\xdd\x2e\x47\xac\x4e\x45\x3b\x01\xef\xd6\xe6\xc8\xd7\x58\xf0\x27\xd2\x9e\xc4\x9a\x98\xbc\x32\x78\x4f\xe9\xfb\x3d\x9d\x0e\x36\x7d\x8f\x9e\x95\x6c\x60\x67\xb1\xe8\x4f\xce\x3d\xa9\xaf\x4d\x83\xfa\x9a\xd6\x28\x06\x16\xe7\x90\xb7\x5c\x14\x11\x37\xd9\xd9\x42\xc1\x24\xbe\xc5\x34\xde\xd5\x8d\xf8\xb7\x13\x0a\xb9\xd2\x55\x1b\x38\x1a\xbd\xae\xf7\xf1\xe4\x82\x5c\xfa\xba\xe4\x7c\x3b\x03\x88\x73\x28\x0c\x7a\xff\xac\x78\xe1\x5c\xb7\x52\xf3\x89\x0a\xc2\xd3\xfb\xff\xb2\x99\xf3\xf3\x0f\x1b\x1e\xcd\xee\x6c\xcc\x6c\xa2\x91\xc1\x72\x8d\x74\x7b\x6e\xdf\xc7\x76\x76\xb7\x07\xeb\x97\xb5\x53\xff\x8a\x0a\x91\x53\xb6\x1d\x4b\x69\x52\x38\x46\x8f\xfe\x7c\x08\xdb\x20\xdb\xae\x2d\xb5\x98\x45\xd3\x26\xdc\xf4\xc7\x22\x9b\xcd\x21\xed\x26\xd3\x6d\x6c\x3f\xf2\x22\x9d\x54\xe9\x9b\x8a\x51\x82\xa6\x91\xda\x56\x47\x1b\xf3\xeb\xcf\x5b\x7c\xf3\x89\x4f\x7e\x04\x00\x00\xff\xff\x95\xd8\x5f\x1d\xd1\x07\x00\x00")

func tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl,
		"tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl",
	)
}

func tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl", size: 2001, mode: os.FileMode(420), modTime: time.Unix(1522037654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x51\x4d\x0f\xd3\x30\x0c\xbd\xf7\x57\x58\x13\x87\x31\xb1\xee\xce\x18\x62\xda\x00\xc1\x01\x21\x34\x76\x0f\xad\x5b\x45\xa4\x49\x94\xa6\x15\xc8\xf2\x7f\x47\xf9\x02\xd6\x7d\x1c\xa2\xd5\xcf\x7e\x7e\x7e\xcf\x8a\xe6\xa7\xe8\x11\x88\x4e\x46\x77\xb2\xaf\x3f\x8b\x59\x7c\x4d\x45\xe6\x7d\x55\x11\x79\x1c\xac\x12\x1e\x61\x15\xb0\x4f\x83\x35\xce\xaf\xa0\x66\xbe\x07\x2f\xbf\x2d\x1e\xb5\x36\x19\xb7\xd3\x0f\x25\x1b\x90\xda\xa3\xeb\x44\x13\xb6\x7c\x44\x5d\x1a\xbf\x88\x01\xa1\x0e\x2f\x33\xe0\x2f\x8f\xba\x1d\xe1\x1b\x8e\x46\xcd\xe8\xee\xd6\x16\x8e\xf7\xa9\x31\x2e\x00\xaa\x88\x9c\xd0\x3d\x42\xfd\x41\xa2\x6a\xcf\xd8\x49\x2d\xbd\x34\x7a\x0c\xf2\x2a\x00\x80\x16\x3b\x31\x29\x0f\xb3\x91\x2d\xb8\x44\x4f\x74\x31\xdf\xad\x45\x77\x12\x03\xaa\x22\x62\x7d\x15\x6a\xc2\xa2\xe0\x0d\x91\xec\xa0\x3e\xba\x7e\x1a\x50\xfb\x1b\xea\xc7\xf3\xa5\x95\x08\xd5\x88\xcc\x57\x23\x5b\x22\xd4\x2d\xf3\xab\x9b\xcb\xa1\x0e\x2f\xf3\xdb\xa2\xc7\xbd\xa4\xa8\x35\xfc\x72\x69\xfd\x17\xda\x47\x88\x2b\xa2\x2d\x44\xb2\x7c\x58\xf8\xde\x6d\xa0\x6c\x1d\x61\xb3\x83\x6d\x4a\xe5\x89\x27\x11\x0e\x63\x2f\xba\x80\xc0\xeb\x03\xd4\xb9\xf6\xf4\xd4\xb4\xeb\xdd\x59\x78\x11\xff\x35\x4a\x8c\x23\x2c\x0c\x48\x7c\x0b\x1b\x80\xb2\xcc\xac\xe6\x31\x7d\x39\xdb\x3a\x39\x87\xb4\x1f\x1a\x05\x44\x99\x3c\x29\x3d\xa7\x4c\x63\x5e\xcc\x70\xf8\x37\x15\x4b\xcb\x86\x1c\xc2\x3e\xeb\x49\x26\x2e\x4d\xfd\xcf\x5e\xae\xfe\x04\x00\x00\xff\xff\xef\xb9\x3d\xd0\x17\x03\x00\x00")

func tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl,
		"tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl",
	)
}

func tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl", size: 791, mode: os.FileMode(420), modTime: time.Unix(1521653758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x11\x27\xbb\x4a\x36\xbd\x47\x95\x5a\xb5\x55\xe4\x1c\x9a\x1e\xfa\x07\xc6\x30\x90\x75\xd8\x59\xb2\x3b\xd0\x44\x23\xfe\x7b\xb5\x60\x13\xec\x3a\x56\x4e\x2c\xf3\x1e\x6f\xde\x7e\x42\xb5\xa4\xca\x32\x41\x7e\x8f\x3d\x6e\x5c\xeb\x83\xe4\x70\x3d\x0c\x99\x1d\xcf\xb0\xc3\x1e\x5f\x4c\x8f\x8d\x2d\x51\xac\x67\x53\x78\x8e\x12\xd0\xb2\x44\xf3\xe9\x76\x69\x33\x9d\xd8\x26\xe9\x45\x17\x02\xb1\x9c\x95\xab\x8e\x8b\x31\xe7\x9c\xf8\x36\x6b\xbc\xdb\xfa\xa7\x13\xd3\x07\x7a\x38\x32\x7f\x89\x29\x98\x5d\xc0\xf6\xf1\xb9\x31\xd8\xda\x4b\x72\xe8\x58\xac\xa3\x8b\x09\x25\xb6\x42\x21\x59\x32\xd5\x80\x5c\x13\x7c\xf7\x5c\xd9\xda\x4c\xbc\x7e\x63\xf1\x84\x35\xc5\x37\x68\xaa\x66\x18\x6e\x33\xd5\x6b\x20\x2e\x87\x21\x53\x9d\x9e\xd9\x31\xef\xbb\xb4\x08\x85\xca\x6f\xcc\x7e\xcf\xfd\xeb\x74\x53\x4c\x93\xe9\xa6\xb3\x6b\xd5\x63\xd3\xd1\x97\x7c\x1e\xc0\xf6\x15\x6a\x2b\x8f\xdd\xd6\x14\xde\xdd\x8c\xbd\x1d\xdd\xd4\x7e\x6c\x9e\xaf\x17\x0d\x4e\x36\xff\x79\x6d\x69\xb1\x54\x55\xc8\xb5\x0d\xca\x3b\xc5\xcc\xe8\x99\xb3\x4e\xc2\xf6\x00\xa6\xa8\x76\x7a\x01\xd5\x3d\xa4\x85\x23\x41\xf9\x6f\xd7\xe1\xa7\x33\xef\x73\xda\xb0\x50\xa8\xb0\xa0\x9f\x2f\x42\x5c\xc6\x43\x69\x5b\x01\x3d\xc3\x2a\x5d\xe6\x17\x3a\x7a\xa8\xc0\xac\x21\x7f\xd8\xee\xa8\x90\x34\xfc\x91\x32\x6c\x82\xb8\xf8\xa2\x16\x58\x35\xc4\x60\xe6\xd4\xb8\x86\xcf\xa3\x7e\xb5\x89\xaa\xf7\xde\x32\xac\xee\x88\x0f\x9c\x52\x74\x3c\xb6\xe7\x57\x9b\x98\x1f\x31\x39\x77\xfa\x17\x00\x00\xff\xff\xc3\x6d\xbf\x56\x5d\x03\x00\x00")

func tmplGraphqlJavaCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaCoreTmpl,
		"tmpl/graphql-java/core.tmpl",
	)
}

func tmplGraphqlJavaCoreTmpl() (*asset, error) {
	bytes, err := tmplGraphqlJavaCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/core.tmpl", size: 861, mode: os.FileMode(420), modTime: time.Unix(1522036071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplGraphqlJavaJavaGraphqls = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\xd1\x6e\xb2\x40\x14\x84\xef\x79\x8a\x09\xdc\x48\xf2\xc7\x07\xe0\x4a\x44\xfe\x06\x53\xd1\x28\xb6\x97\xcd\x29\x9c\xe2\x46\xd8\xa5\xcb\xa2\x35\xa5\xef\xde\xe0\x1a\xb5\x49\x7b\xb3\xc9\x64\x66\xcf\x4c\x3e\xc7\xc3\x4c\x68\xce\x8d\x38\x30\xde\x94\x46\xa9\xa8\xd9\xbd\x57\x10\xd2\xb0\x96\x54\xa1\x6b\xd9\x29\xae\x91\xc9\xc5\x1f\xbd\x76\xa2\x32\x42\x06\x98\x2a\x55\x31\x49\xff\x17\xcb\xe8\x8e\x7d\x28\x89\x4d\x14\x3e\x86\x6b\xf4\x88\xd3\xed\x02\x3d\x66\xc9\x3a\x8e\xb2\xe4\x29\x76\x1c\x0f\xa1\x94\xca\x90\x61\x10\xcc\xa9\x61\x50\x0b\xc2\x9c\x0e\x56\x3a\x9e\xe3\x21\xfe\xa0\xba\xa9\xb8\x3d\x0b\x96\x5d\x8d\x07\x96\x05\x6b\x4c\x86\x5c\x76\x6a\x78\xd4\xec\xcb\xc0\xad\x79\x7c\x64\xc9\x7a\x9c\xab\xba\x56\xd2\xf5\xf1\x89\x45\x98\xe2\x79\x39\xbc\x5f\x8e\x87\x36\xa7\x8a\x34\x66\x64\x38\x13\x35\xdf\x1d\x18\xca\x02\xb8\x83\xe3\xfa\xe7\xa2\x66\x5f\x62\x45\xf9\x9e\x4a\x8b\xc6\xec\x44\x7b\xd9\x64\x97\x0e\xff\x20\xa9\x66\x1c\x45\x75\x26\x55\x58\x86\xc3\x06\x32\x5c\xd8\xf4\x1d\xbd\xdb\x5c\x7b\x37\xc0\xc6\x68\x21\xcb\x7f\xb0\xf5\x56\xfd\xcd\xf2\x07\xcc\xe5\x74\x1e\x47\x19\x7a\x24\x69\x16\xaf\xff\x87\x51\x8c\x1e\xdb\x34\x59\xa6\x37\xd2\x49\xba\xda\x66\x2f\xd7\xe4\x1d\xf8\xef\x00\x00\x00\xff\xff\xcf\x80\xe7\xc0\xfa\x01\x00\x00")

func tmplGraphqlJavaJavaGraphqlsBytes() ([]byte, error) {
	return bindataRead(
		_tmplGraphqlJavaJavaGraphqls,
		"tmpl/graphql-java/java.graphqls",
	)
}

func tmplGraphqlJavaJavaGraphqls() (*asset, error) {
	bytes, err := tmplGraphqlJavaJavaGraphqlsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/graphql-java/java.graphqls", size: 506, mode: os.FileMode(420), modTime: time.Unix(1521942072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/graphql-java/Enum#{{GenJavaTypeName .Name}}.java.tmpl":             tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/InputObject#{{GenJavaTypeName .Name}}.java.tmpl":      tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/Interface#Is{{GenJavaTypeName .Name}}.java.tmpl":      tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/Java#lombok.config.tmpl":                              tmplGraphqlJavaJavaLombokConfigTmpl,
	"tmpl/graphql-java/Java#{{Config.SchemaName}}SchemaStub.java.tmpl":       tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl,
	"tmpl/graphql-java/Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl": tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl,
	"tmpl/graphql-java/core.tmpl":                                            tmplGraphqlJavaCoreTmpl,
	"tmpl/graphql-java/java.graphqls":                                        tmplGraphqlJavaJavaGraphqls,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": {nil, map[string]*bintree{
		"graphql-java": {nil, map[string]*bintree{
			"Enum#{{GenJavaTypeName .Name}}.java.tmpl":             {tmplGraphqlJavaEnumGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"InputObject#{{GenJavaTypeName .Name}}.java.tmpl":      {tmplGraphqlJavaInputobjectGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"Interface#Is{{GenJavaTypeName .Name}}.java.tmpl":      {tmplGraphqlJavaInterfaceIsGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"Java#lombok.config.tmpl":                              {tmplGraphqlJavaJavaLombokConfigTmpl, map[string]*bintree{}},
			"Java#{{Config.SchemaName}}SchemaStub.java.tmpl":       {tmplGraphqlJavaJavaConfigSchemanameSchemastubJavaTmpl, map[string]*bintree{}},
			"Object,Interface#{{GenJavaTypeName .Name}}.java.tmpl": {tmplGraphqlJavaObjectInterfaceGenjavatypenameNameJavaTmpl, map[string]*bintree{}},
			"core.tmpl":     {tmplGraphqlJavaCoreTmpl, map[string]*bintree{}},
			"java.graphqls": {tmplGraphqlJavaJavaGraphqls, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
