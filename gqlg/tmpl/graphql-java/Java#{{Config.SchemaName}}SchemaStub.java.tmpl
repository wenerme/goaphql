{{template "JavaPackage" .}}
import com.google.common.reflect.TypeToken;
import graphql.schema.idl.*;
import graphql.schema.*;
import com.google.common.base.Preconditions;

public interface {{Config.SchemaName}}SchemaStub {

    @lombok.extern.slf4j.Slf4j
    public class WiringFactoryStub extends AbstractWiringFactory {

    @Override
    public DataFetcher getDefaultDataFetcher(FieldWiringEnvironment environment) {
        String name = environment.getParentType().getName();
        switch (name) {
    {{range .GetDefinitions -}}
    {{if eq (TypeNameOf .) "ObjectTypeDefinition" -}}
    {{if not (IsSkipped .) -}}
        case "{{.Name}}":
            return this::fetch{{.Name}};
    {{- end}}
    {{- end}}
    {{- end}}
        default:
            log.warn("No fetcher for {}", name);
        }
        return null;
    }


    {{range .GetDefinitions -}}
    {{if eq (TypeNameOf .) "ObjectTypeDefinition" -}}
    {{if not (IsSkipped .) -}}
    {{- $def := . -}}
        public Object fetch{{.Name}}(DataFetchingEnvironment environment) {

            {{GenJavaType .Name}} resolver = environment.getSource();
            ValueResolver valueResolver = null;
            switch (environment.getFieldDefinition().getName()) {
    {{range .FieldDefinitions -}}
    {{- $field := . -}}
                case "{{.Name}}":
                    valueResolver = resolve(resolver::resolve{{ToUpperCamel .Name}}, buildValueResolver(
                        new ValueResolverImpl<{{if .ArgumentDefinitions}}{{GenJavaType $def.Name}}.{{ToUpperCamel .Name}}Argument{{else}}Void{{end}},{{GenJavaType .Type}}>(){},
                        environment
                    ));
                    break;
    {{- end}}
                default:
                    return fetchFallback(environment);
            }
            Preconditions.checkState(valueResolver.isResolved(), "Value not resolved");
            return valueResolver.getFeature();
        }
    {{- end}}
    {{- end}}
    {{- end}}
    }
}
